<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>结构体</title>
    <url>/2019/11/12/%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<h2 id="结构体声明"><a href="#结构体声明" class="headerlink" title="结构体声明"></a>结构体声明</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> title[<span class="number">41</span>];</span><br><span class="line">	<span class="keyword">char</span> author[<span class="number">31</span>];</span><br><span class="line">	<span class="keyword">float</span> value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>该声明并未创建实际的数据对象，只是描述了该对象由什么组成。  </li>
<li>该声明后的”;”是必须有的，表示结构布局定义结束。  </li>
<li>该声明放在函数内外均可，若放在一个函数内，它的标识只能在函数内部使用，放在函数外部，则声明后的所有函数都能使用。  </li>
</ul>
<hr>
<blockquote>
<p>struct book library; </p>
<ul>
<li>将library声明为一个使用book结构布局的结构变量。  <h2 id="定义结构变量"><a href="#定义结构变量" class="headerlink" title="定义结构变量"></a>定义结构变量</h2>struct book a, b, * c;    </li>
<li>从本质上看，创建了一个名为<code>struct book</code>的新类型。  </li>
<li>该新类型的内存形式相当于将结构体内所有成员的内存合并在一起。  </li>
</ul>
<h2 id="初始化结构体"><a href="#初始化结构体" class="headerlink" title="初始化结构体"></a>初始化结构体</h2></blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span> = &#123;</span></span><br><span class="line">	<span class="string">"Thinking in C"</span>,</span><br><span class="line">	<span class="string">"张浩"</span>,</span><br><span class="line">	<span class="string">"19"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>C99和C11为结构体提供了指定初始化器  </p>
<ul>
<li>只是初始化book结构的value成员<br>  <code>struct book surprise = {.value = 19.98};</code></li>
<li>可以按照任意顺序指定初始化器    <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">gift</span> = &#123;</span></span><br><span class="line">.value = <span class="number">25.99</span>,</span><br><span class="line">.author = <span class="string">"James Broadfool"</span>,</span><br><span class="line">.title = <span class="string">"Rue for the Toad"</span></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="访问结构成员"><a href="#访问结构成员" class="headerlink" title="访问结构成员"></a>访问结构成员</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">library.title;</span><br><span class="line">library.author;</span><br><span class="line">library.value;</span><br></pre></td></tr></table></figure></li>
<li>本质上，<code>.title</code>,<code>.author</code>,<code>.value</code>的作用相当于book结构的下标。  </li>
<li>需要访问<code>library.value</code>的地址时用<code>&amp;library.value</code><br>  (“.”的优先级比”&amp;”高)  <h2 id="结构体的嵌套结构"><a href="#结构体的嵌套结构" class="headerlink" title="结构体的嵌套结构"></a>结构体的嵌套结构</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 20</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * msgs[<span class="number">5</span>] = </span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"   Thank you for the wonderful evening,"</span>,</span><br><span class="line">	<span class="string">"You certainly prove that a "</span>,</span><br><span class="line">	<span class="string">"is a special kind of guy .We must get together"</span>,</span><br><span class="line">	<span class="string">"over a delicious "</span>,</span><br><span class="line">	<span class="string">" and have a few laughs"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> first[LEN];</span><br><span class="line">	<span class="keyword">char</span> last[LEN]; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">names</span> <span class="title">handle</span>;</span></span><br><span class="line">	<span class="keyword">char</span> favfood[LEN];</span><br><span class="line">	<span class="keyword">char</span> job[LEN];</span><br><span class="line">	<span class="keyword">float</span> income;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">guy</span> <span class="title">fellow</span> = &#123;</span></span><br><span class="line">		&#123;<span class="string">"Ewen"</span>, <span class="string">"Villard"</span>&#125;,</span><br><span class="line">		<span class="string">"grilled salmon"</span>,</span><br><span class="line">		<span class="string">"personality coach"</span>,</span><br><span class="line">		<span class="number">68112.00</span></span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Dear %s,  \n\n"</span>, fellow.handle.first);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s%s.\n"</span>, msgs[<span class="number">0</span>], fellow.handle.first);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s%s\n"</span>, msgs[<span class="number">1</span>], fellow.job);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, msgs[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s%s%s"</span>, msgs[<span class="number">3</span>], fellow.favfood, msgs[<span class="number">4</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(fellow.income &gt; <span class="number">150000.0</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"!!"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(fellow.income &gt; <span class="number">75000.0</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"!"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n%40s%s\n"</span>, <span class="string">" "</span>, <span class="string">"See you soon,"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%40s%s\n"</span>, <span class="string">" "</span>, <span class="string">"Shalala"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">Dear Ewen,</span><br><span class="line"></span><br><span class="line">   Thank you <span class="keyword">for</span> the wonderful evening,Ewen.</span><br><span class="line">You certainly prove that a personality coach</span><br><span class="line">is a special kind of guy .We must <span class="built_in">get</span> together</span><br><span class="line">over a delicious grilled salmon <span class="keyword">and</span> have a few laughs.</span><br><span class="line"></span><br><span class="line">                                        See you soon,</span><br><span class="line">                                        Shalala</span><br></pre></td></tr></table></figure>
<h2 id="声明结构数组"><a href="#声明结构数组" class="headerlink" title="声明结构数组"></a>声明结构数组</h2><code>struct book library[n];</code>  </li>
<li>注意：  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">library             <span class="comment">//一个book结构的数组</span></span><br><span class="line">library[<span class="number">2</span>]          <span class="comment">//一个数组元素，该元素是book结构  </span></span><br><span class="line">library[<span class="number">2</span>].title    <span class="comment">//一个char数组（library[2]的title成员）</span></span><br><span class="line">library[<span class="number">2</span>].title[<span class="number">4</span>] <span class="comment">//数组中library[2]元素的title成员的一个字符</span></span><br></pre></td></tr></table></figure>
<h2 id="指向结构体的指针"><a href="#指向结构体的指针" class="headerlink" title="指向结构体的指针"></a>指向结构体的指针</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 20</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> first[LEN];</span><br><span class="line">	<span class="keyword">char</span> last[LEN]; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">names</span> <span class="title">handle</span>;</span></span><br><span class="line">	<span class="keyword">char</span> favfood[LEN];</span><br><span class="line">	<span class="keyword">char</span> job[LEN];</span><br><span class="line">	<span class="keyword">float</span> income;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">guy</span> <span class="title">fellow</span>[2] = &#123;</span></span><br><span class="line">		&#123;</span><br><span class="line">			&#123;<span class="string">"Ewen"</span>, <span class="string">"Villard"</span>&#125;,</span><br><span class="line">			<span class="string">"grilled salmon"</span>,</span><br><span class="line">			<span class="string">"personality coach"</span>,</span><br><span class="line">			<span class="number">68112.00</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			&#123;<span class="string">"Rodney"</span>, <span class="string">"Swillbelly"</span>&#125;,</span><br><span class="line">			<span class="string">"tripe"</span>,</span><br><span class="line">			<span class="string">"tabloid editor"</span>,</span><br><span class="line">			<span class="number">432400.00</span></span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">guy</span> * <span class="title">him</span>;</span></span><br><span class="line">		</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"address #1: %p #2: %p\n"</span>, &amp;fellow[<span class="number">0</span>], &amp;fellow[<span class="number">1</span>]);</span><br><span class="line">	him = &amp;fellow[<span class="number">0</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"pointer #1: %p #2: %p\n"</span>, him, him + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"him-&gt;income is $%.2f: (*him).income is $%.2f\n"</span>, him-&gt;income, (*him).income);</span><br><span class="line">	him++;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"him-&gt;favfood is $%.2f: him-&gt;handle.last is $%.2f\n"</span>, him-&gt;favfood, him-&gt;handle.last);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">address #<span class="number">1</span>: <span class="number">000000000062F</span>D60 #<span class="number">2</span>: <span class="number">000000000062F</span>DB4</span><br><span class="line">pointer #<span class="number">1</span>: <span class="number">000000000062F</span>D60 #<span class="number">2</span>: <span class="number">000000000062F</span>DB4</span><br><span class="line">him-&gt;income is $<span class="number">68112.00</span>: (*him).income is $<span class="number">68112.00</span></span><br><span class="line">him-&gt;favfood is $<span class="number">0.00</span>: him-&gt;handle.last is $<span class="number">0.00</span></span><br></pre></td></tr></table></figure>
<h4 id="声明和初始化结构指针"><a href="#声明和初始化结构指针" class="headerlink" title="声明和初始化结构指针"></a>声明和初始化结构指针</h4><code>struct guy * him;</code>  </li>
<li>指针现在可以指向任何guy类型的结构，和数组不同，结构变量名并不是结构的地址，因此要在结构变量名前面加上“&amp;”运算符，如果barnery是一个guy类型的结构变量，可以这样写：<br>  <code>him = &amp;barnery;</code>  </li>
<li>在本例中，fellow是一个结构数组，这意味着fellow[0]是一个结构，所以要让him指向fellow[0]，可以这样写：<br>  <code>him = &amp;fellow[0];</code>  <h4 id="用指针访问成员"><a href="#用指针访问成员" class="headerlink" title="用指针访问成员"></a>用指针访问成员</h4><blockquote>
<p>“.”的左操作数是一个结果为结构的表达式<br>“-&gt;”的左操作数是指向结构体的指针  </p>
<ul>
<li>思考：指针him指向结构变量fellow[0]，如何通过him获得fellow[0]的成员的值呢？  </li>
</ul>
<ol>
<li>使用-&gt;运算符  <ul>
<li>如果<code>him == &amp;barney</code>，那么<code>him-&gt;income</code>即是<code>barney.income</code>  </li>
<li>如果<code>him == &amp;fellow[0]</code>，那么<code>him-&gt;income</code>即是<code>fellow[0].income</code>  </li>
</ul>
</li>
<li>“<em>”和“&amp;”是互逆运算符<br> `fellow[0].income == (</em>him).income`</li>
</ol>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>C语言, 数据结构</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>指针用法</title>
    <url>/2019/11/12/%E6%8C%87%E9%92%88%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="指针基础用法"><a href="#指针基础用法" class="headerlink" title="指针基础用法"></a>指针基础用法</h1><ol>
<li>声明指针：<code>int * pi; //表示指向int类型变量的指针</code><ol>
<li>指针用于储存变量的地址。  </li>
<li>*和指针名之间的空格：声明时使用空格，在解引用变量时省略空格。  </li>
</ol>
</li>
<li>关于指针的符号：&amp;和*<br> &amp;变量名：给出变量的储存地址<br> *：解引用运算符  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ptr = &amp;bah;  </span><br><span class="line">val = *ptr;</span><br><span class="line">//val = ptr;两种写法等价</span><br></pre></td></tr></table></figure>
<h1 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h1><h2 id="指针与一维数组"><a href="#指针与一维数组" class="headerlink" title="指针与一维数组"></a>指针与一维数组</h2></li>
</ol>
<ul>
<li>数组名是数组首元素的地址  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//array是一个数组</span><br><span class="line">array == &amp;array[0];</span><br></pre></td></tr></table></figure></li>
<li>数组与指针的关系  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 4</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">short</span> dates[SIZE];</span><br><span class="line">	<span class="keyword">short</span> * pti;</span><br><span class="line">	<span class="keyword">short</span> index;</span><br><span class="line">	<span class="keyword">double</span> bills[SIZE];</span><br><span class="line">	<span class="keyword">double</span> * ptf;</span><br><span class="line">	</span><br><span class="line">	pti = dates;</span><br><span class="line">	ptf = bills;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%23s %15s\n"</span>, <span class="string">"short"</span>, <span class="string">"double"</span>);</span><br><span class="line">	<span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; SIZE; index++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"pointers + %d: %10p %10p\n"</span>, index, pti + index, ptf + index);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">                  <span class="keyword">short</span>          <span class="keyword">double</span></span><br><span class="line">pointers + <span class="number">0</span>: <span class="number">000000000062F</span>E00 <span class="number">000000000062F</span>DE0</span><br><span class="line">pointers + <span class="number">1</span>: <span class="number">000000000062F</span>E02 <span class="number">000000000062F</span>DE8</span><br><span class="line">pointers + <span class="number">2</span>: <span class="number">000000000062F</span>E04 <span class="number">000000000062F</span>DF0</span><br><span class="line">pointers + <span class="number">3</span>: <span class="number">000000000062F</span>E06 <span class="number">000000000062F</span>DF8</span><br></pre></td></tr></table></figure>
a. 在系统中，地址按字节编址，short占2字节，double占8字节。<br>b. 在C中，指针加1指增加一个存储单元。<br>c. 因此对数组意味着加1后地址是下一元素的地址  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dates + 2 == &amp;dates[2];</span><br><span class="line">*(dates + 2) == dates[2];</span><br></pre></td></tr></table></figure></li>
<li>间接运算符(*)优先级高于+  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*(dates + 2)    //dates数组的第三个元素</span><br><span class="line">*dates + 2      //dates第一个元素的值加2</span><br></pre></td></tr></table></figure></li>
<li>一元运算符*和++优先级相同，但结合律是从右向左，因此<code>*start++</code>,是先对++求值再*运算。  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> data[<span class="number">2</span>] = &#123;<span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> moredata[<span class="number">2</span>] = &#123;<span class="number">300</span>, <span class="number">400</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> * p1;</span><br><span class="line">	<span class="keyword">int</span> * p2;</span><br><span class="line">	<span class="keyword">int</span> * p3;</span><br><span class="line">	p1 = p2 = data;</span><br><span class="line">	p3 = moredata;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"  *p1 = %d,   *p2 = %d,   *p3 = %d\n"</span>, *p1, *p2, *p3);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*p1++ = %d, *++p2 = %d, (*p3)++ = %d\n"</span>, *p1++, *++p2, (*p3)++);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"  *p1 = %d,   *p2 = %d,   *p3 = %d\n"</span>, *p1, *p2, *p3);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">  *p1 = <span class="number">100</span>,   *p2 = <span class="number">100</span>,   *p3 = <span class="number">300</span></span><br><span class="line">*p1++ = <span class="number">100</span>, *++p2 = <span class="number">200</span>, (*p3)++ = <span class="number">300</span></span><br><span class="line">  *p1 = <span class="number">200</span>,   *p2 = <span class="number">200</span>,   *p3 = <span class="number">301</span></span><br></pre></td></tr></table></figure>
<h2 id="指针和多维数组"><a href="#指针和多维数组" class="headerlink" title="指针和多维数组"></a>指针和多维数组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int zippo[4][2];</span><br><span class="line">zippo == &amp;zippo[0];</span><br><span class="line">zippo[0] == &amp;zippo[0][0];</span><br><span class="line"></span><br><span class="line">//因此zippo == zippo[0];</span><br></pre></td></tr></table></figure></li>
<li>zippo[0]是一个占用一个int大小的对象的地址，zippo是一个占用两个int大小对象的地址。  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*zippo == zippo[<span class="number">0</span>];</span><br><span class="line">**zippo == zippo[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li>
<li>加一个*解一层引用  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zippo[4][2] = &#123;&#123;2, 4&#125;, &#123;6, 8&#125;, &#123;1, 3&#125;, &#123;5, 7&#125;&#125;;</span><br></pre></td></tr></table></figure></li>
<li>zippo + 2 == 6;<br><em>(zippo + 2) == 6;<br>*(zippo + 2) + 1 == 8;<br>\</em>(*(zippo + 2) + 1) == 3;  <h2 id="指向多维数组的指针（列指针）"><a href="#指向多维数组的指针（列指针）" class="headerlink" title="指向多维数组的指针（列指针）"></a>指向多维数组的指针（列指针）</h2><code>int (*pz)[2];</code>  </li>
<li>该声明表示pz指向一个内含两个int类型值得数组</li>
</ul>
<p><code>int * pax[2];</code>  </p>
<ul>
<li>pax是一个内含两个指针元素的数组，每个元素都指向int的指针  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> zippo[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">2</span>, <span class="number">4</span>&#125;, &#123;<span class="number">6</span>, <span class="number">8</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">7</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">int</span> (*pz)[<span class="number">2</span>];</span><br><span class="line">	pz = zippo;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"  pz = %p,   pz + 1 = %p\n"</span>,   pz, pz + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"pz[0] = %p, pz[0] + 1 = %p\n"</span>, pz[<span class="number">0</span>], pz[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">" *pz = %p,   *pz + 1 = %p\n"</span>,  *pz, *pz + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"pz[0][0] = %d\n"</span>, pz[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">" *pz[0] = %d\n"</span>, *pz[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"   **pz = %d\n"</span>, **pz);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"     pz[2][1] = %d\n"</span>, pz[<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*(*(pz + 2) + 1) = %d\n"</span>, *(*(pz + <span class="number">2</span>) + <span class="number">1</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">  pz = <span class="number">000000000062F</span>DF0,   pz + <span class="number">1</span> = <span class="number">000000000062F</span>DF8</span><br><span class="line">pz[<span class="number">0</span>] = <span class="number">000000000062F</span>DF0, pz[<span class="number">0</span>] + <span class="number">1</span> = <span class="number">000000000062F</span>DF4</span><br><span class="line"> *pz = <span class="number">000000000062F</span>DF0,   *pz + <span class="number">1</span> = <span class="number">000000000062F</span>DF4</span><br><span class="line">pz[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"> *pz[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">   **pz = <span class="number">2</span></span><br><span class="line">     pz[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line">*(*(pz + <span class="number">2</span>) + <span class="number">1</span>) = <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li>列指针进行&amp;运算变为行指针，行指针进行*运算变为列指针。</li>
</ul>
]]></content>
      <categories>
        <category>C语言, 数据结构</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog</title>
    <url>/2019/11/11/Blog/</url>
    <content><![CDATA[<h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><p>hello blog</p>
]]></content>
  </entry>
</search>
